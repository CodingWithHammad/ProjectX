*{
    margin: 0;
    padding: 0;
    text-align: center;
}
h1{
    background-color: #081b31;
    color: #fff;
    height: 5rem;
    line-height: 5rem;
}
.choice{
    height: 165px;
    width: 165px;
    display: flex;
    justify-content: center;
    align-items:center ;
    border-radius: 50%;
}
.choice:hover{
    /* opacity: 0.5; */
    cursor: pointer;
    background-color: #0d0d0e;
}
img{
    
    height: 150px;
    width: 150px;
    object-fit: cover;
    border-radius: 50%;

}
.choices{
    display: flex;
    justify-content: center;
    align-items: center;
    gap:3rem;
    margin-top: 5rem;
}
.score-board{
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 2rem;
    margin-top: 3rem;
    gap: 5rem;
}
#user-score,#comp-score{
    font-size: 4rem;
}
.msg-container{
    margin-top: 5rem;
}
#msg{
    background-color: black;
    color: white;
    font-size: 2rem;
    /* margin-top: 5rem; */
    display: inline;
    padding: 1rem;
    border-radius: 1rem;

}
//
/* const msg = document.querySelector("#msg");

const userScorePara = document.querySelector("#user-score");
const compScorePara = document.querySelector("#comp-score");

const genCompChoice = () => {
    const options = ["rock", "paper", "scissor"];
    const randIdx = Math.floor(Math.random() * 3);
    return options[randIdx];
    // rock paper scissor
}
const drawGame = () => {
    msg.innerText = "Game was draw.Play again"
    msg.style.backgroundColor = "orange"
}
const showWinner = (userWin,userChoice,compChoice) => {
    if (userWin) {
        userScore++;
        userScorePara.innerText=userScore;
        msg.innerText = `You win! Your ${userChoice} beats ${compChoice}`;
        msg.style.backgroundColor = "orange";
    } else {
        compScore++;
        compScorePara.innerText=compScore;
        msg.innerText = `You lose! ${compChoice} beats ${userChoice}`;
        msg.style.backgroundColor = "orange"
    }
};


const playGame = (userChoice) => {
    // Generate comp choice -> modular
    const compChoice = genCompChoice();

    if (userChoice === compChoice) {
        //Draw cond
        drawGame();
    } else {
        let userWin = true;
        if (userChoice === "rock") {
            //scissor ,paper 
            userWin = compChoice === "paper" ? false : true;
        } else if (userChoice === "paper") {
            //rock,scissor
            userWin = compChoice === "scissor" ? false : true;
        } else {
            // rock,paper
            userWin = compChoice === "rock" ? false : true;
        }
        showWinner(userWin,userChoice,compChoice);
    }
}
 */